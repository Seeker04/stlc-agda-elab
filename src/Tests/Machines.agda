{-# OPTIONS --prop --rewriting --guardedness #-}

module Machines where

open import Data.Bool hiding (not) renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Nat using (suc)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.String using (_++_)
open import Data.Product using (_,_; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Unit renaming (tt to triv)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

-- Machines are coinductive types with the constructor: genMachine

-- here we construct a machine that can add together its input, can reset to 0 and return the result
                                                           -- seed: we start from 0
--                            put      set    get  seed    -- put: we increment the sum with the input
sum-machine = "genMachine (Œªs i. s+i) (Œª_.0) (Œªs.s) 0"     -- set: resets the sum to 0
                                                           -- get: returns the current sum (what's in "memory")
_ : compile-eval sum-machine ‚â° inj‚ÇÅ (Ty.Machine ,
                 I.genMachine ((lam (lam (iteNat q (suco q) (q [ p ]))) [ p ] $ q) [ p ] $ q)
                              (lam zeroo [ p ] $ q)
                              (lam q [ p ] $ q)
                              zeroo
                 , Œª Œ≥* ‚Üí STLC.genMachine (Œª s i ‚Üí ite‚Ñï i (Œª x ‚Üí suc x) s)
                                          (Œª _ ‚Üí 0)
                                          (Œª s ‚Üí s)
                                          0)
_ = refl

-- destructors: put (inserts value), set (sends a signal), get (returns state)

_ : eval ("get "                 ++ sum-machine)                ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí  0)
_ = refl
_ : eval ("get put "             ++ sum-machine ++ " 10")       ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 10)
_ = refl
_ : eval ("get put put put "     ++ sum-machine ++ " 10 20 30") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 60)
_ = refl
_ : eval ("get put put set put " ++ sum-machine ++ " 10 20 30") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 50)
_ = refl

-- this machine works similarly, but adds together the odd and even numbers separately
-- it has a switch, which can be toggled using the set operation, that determines which sum get returns
-- (it returns the sum of odd numbers by default)
-- the machine stores the sum of odd numbers, sum of even numbers and the switch's state in a ùïÉ √ó ‚Ñï √ó ‚Ñï triple

not  = "((Œª a. if a then false else true)       : ùïÉ ‚Üí ùïÉ)" 
even = "((Œª x. ite‚Ñï true (Œªa." ++ not ++ "a) x) : ‚Ñï ‚Üí ùïÉ)" -- explained in Nats.agda

partitioned-sums = "genMachine                                                  \
\                     (Œªs i. if (" ++ even ++ "i) then                          \
\                       ((fst s) ,  (fst snd s)      , ((snd snd s) + i))       \
\                     else                                                      \
\                       ((fst s) , ((fst snd s) + i) ,  (snd snd s)    ))       \
\                     (Œªs. (" ++ not ++ "(fst s)) , (fst snd s) , (snd snd s))  \
\                     (Œªs. if (fst s) then (fst snd s) else (snd snd s))        \
\                     (true , 0 , 0)"

_ : compile-eval partitioned-sums ‚â° inj‚ÇÅ (Ty.Machine ,
 I.genMachine
 ((lam (lam
   (iteBool
     ‚ü® fst (q [ p ]) , ‚ü® fst (snd (q [ p ])) , iteNat q (suco q) (snd (snd (q [ p ]))) ‚ü© ‚ü©
     ‚ü® fst (q [ p ]) , ‚ü® iteNat q (suco q) (fst (snd (q [ p ]))) , snd (snd (q [ p ])) ‚ü© ‚ü©
     (lam (iteNat true (lam (lam (iteBool false true q) $ q) [ p ] $ q) q) $ q))) [ p ] $ q) [ p ] $ q)

 (lam
   ‚ü® lam (iteBool false true q) $ fst q ,
   ‚ü® fst (snd q) ,
   snd (snd q) ‚ü© ‚ü©
   [ p ] $ q)

 (lam (iteBool (fst (snd q)) (snd (snd q)) (fst q)) [ p ] $ q)

 ‚ü® true , ‚ü® zeroo , zeroo ‚ü© ‚ü©

 ,

 (Œª Œ≥* ‚Üí STLC.genMachine
    (Œª s i ‚Üí
       if ite‚Ñï tt (Œª b ‚Üí if b then ff else tt) i then
         proj‚ÇÅ s ,
         proj‚ÇÅ (proj‚ÇÇ s) ,
         ite‚Ñï i (Œª x ‚Üí suc x) (proj‚ÇÇ (proj‚ÇÇ s))
       else
         proj‚ÇÅ s ,
         ite‚Ñï i (Œª x ‚Üí suc x) (proj‚ÇÅ (proj‚ÇÇ s)) ,
         proj‚ÇÇ (proj‚ÇÇ s))

    (Œª s ‚Üí (if proj‚ÇÅ s then ff else tt) , proj‚ÇÅ (proj‚ÇÇ s) , proj‚ÇÇ (proj‚ÇÇ s))

    (Œª s ‚Üí if proj‚ÇÅ s then proj‚ÇÅ (proj‚ÇÇ s) else proj‚ÇÇ (proj‚ÇÇ s))

    (tt , 0 , 0)))

_ = refl

_ : eval ("get put put put put"     ++ partitioned-sums ++ "3 10 1 8") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 4)
_ = refl
_ : eval ("get put put put put set" ++ partitioned-sums ++ "3 10 1 8") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 18)
_ = refl

-- we already see that we can construct inner states of arbitrary complexity
-- similarly, we could support machine types which have more than one input methods (like put),
-- output methods (like get) and signals (like set), essentially simulating things like
-- Turing machines, REPLs or even operating systems...
