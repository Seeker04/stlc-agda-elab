{-# OPTIONS --prop --rewriting --guardedness #-}

module Products where

open import Data.Bool renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Nat using (suc)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Product using (_√ó_; _,_) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ)
open import Data.Unit renaming (tt to triv)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

-- nullary product
_ : compile-eval "trivial" ‚â° inj‚ÇÅ (Unit , trivial , Œª Œ≥* ‚Üí triv)
_ = refl

-- binary product with the _,_ constructor (often called pair)
_ : compile-eval "1,2" ‚â° inj‚ÇÅ (Nat √óo Nat , ‚ü® suco zeroo , suco (suco zeroo) ‚ü© , Œª Œ≥* ‚Üí 1 , 2)
_ = refl

-- non-homogeneous binary product
_ : compile-eval "0 , false" ‚â° inj‚ÇÅ (Nat √óo Bool , ‚ü® zeroo , false ‚ü© , Œª Œ≥* ‚Üí 0 , ff)
_ = refl

-- right associativity of _√ó_ and _,_ gives us chains of products (triples, quadruples,...)
_ : compile-eval "3,2,1,0" ‚â° inj‚ÇÅ (Nat √óo (Nat √óo (Nat √óo Nat))
                                , ‚ü® suco (suco (suco zeroo)) , ‚ü® suco (suco zeroo) , ‚ü® suco zeroo , zeroo ‚ü© ‚ü© ‚ü©
                                , Œª Œ≥* ‚Üí 3 , 2 , 1 , 0)
_ = refl

_ : compile-eval "1, trivial, (isZero 1)" ‚â° inj‚ÇÅ (Nat √óo (Unit √óo Bool)
                                               , ‚ü® suco zeroo , ‚ü® trivial , iteNat true false (suco zeroo) ‚ü© ‚ü©
                                               , Œª Œ≥* ‚Üí 1 , triv , ff)
_ = refl

_ : compile-eval "trivial , 1+2 , ((Œª x.x) : ùïÉ ‚Üí ùïÉ)" ‚â° inj‚ÇÅ (Unit √óo (Nat √óo (Bool ‚áí Bool)) ,
                                                              ‚ü® trivial , ‚ü® lam (lam (iteNat q (suco q) (q [ p ])))
                                                              $ suco zeroo $ suco (suco zeroo) , lam q ‚ü© ‚ü©
                                                            , Œª Œ≥* ‚Üí triv , 3 , Œª x ‚Üí x)
_ = refl

-- destructing pairs
_ : compile-eval "fst (2,3)" ‚â° inj‚ÇÅ (Nat , fst ‚ü® suco (suco zeroo) , suco (suco (suco zeroo)) ‚ü© , Œª Œ≥* ‚Üí 2)
_ = refl

_ : compile-eval "snd (2,3)" ‚â° inj‚ÇÅ (Nat , snd ‚ü® suco (suco zeroo) , suco (suco (suco zeroo)) ‚ü© , Œª Œ≥* ‚Üí 3)
_ = refl

-- destructing triples
_ : compile-eval "fst     (0,1,2)" ‚â° inj‚ÇÅ (Nat , fst      ‚ü® zeroo , ‚ü® suco zeroo , suco (suco zeroo) ‚ü© ‚ü©  , Œª Œ≥* ‚Üí 0)
_ = refl
_ : compile-eval "fst snd (0,1,2)" ‚â° inj‚ÇÅ (Nat , fst (snd ‚ü® zeroo , ‚ü® suco zeroo , suco (suco zeroo) ‚ü© ‚ü©) , Œª Œ≥* ‚Üí 1)
_ = refl
_ : compile-eval "snd snd (0,1,2)" ‚â° inj‚ÇÅ (Nat , snd (snd ‚ü® zeroo , ‚ü® suco zeroo , suco (suco zeroo) ‚ü© ‚ü©) , Œª Œ≥* ‚Üí 2)
_ = refl

-- function that extracts the third component from triples of ‚Ñï
third = "(Œª t. snd snd t) : (‚Ñï √ó ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï)"

_ : compile-eval third ‚â° inj‚ÇÅ (Nat √óo (Nat √óo Nat) ‚áí Nat , lam (snd (snd q)) , Œª Œ≥* Œ±* ‚Üí œÄ‚ÇÇ (œÄ‚ÇÇ Œ±*))
_ = refl

_ : eval (third ++‚Çõ "10, 20, 30") ‚â° inj‚ÇÅ (Nat , (Œª Œ≥* ‚Üí 30))
_ = refl

_ : eval (third ++‚Çõ "5+5, 42, (if (isZero 0) then (6+2) else 0)") ‚â° inj‚ÇÅ (Nat , (Œª Œ≥* ‚Üí 8))
_ = refl

-- curry and uncurry over ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï functions

curry = "(Œª f. Œª x y. f (x,y)) : (‚Ñï √ó ‚Ñï ‚Üí ‚Ñï) ‚Üí (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï)"

uncurry = "(Œª f. Œª p. (f (fst p)) (snd p)) : (‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) ‚Üí (‚Ñï √ó ‚Ñï ‚Üí ‚Ñï)"

add = "(Œª x y. x + y) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï"

_ : compile-eval curry ‚â° inj‚ÇÅ (((Nat √óo Nat) ‚áí Nat) ‚áí (Nat ‚áí Nat ‚áí Nat)
                             , lam (lam (lam (q [ p ] [ p ] $ ‚ü® q [ p ] , q ‚ü©)))
                             , Œª Œ≥* f x y ‚Üí f (x , y))
_ = refl
_ : compile-eval uncurry ‚â° inj‚ÇÅ ((Nat ‚áí Nat ‚áí Nat) ‚áí ((Nat √óo Nat) ‚áí Nat)
                               , lam (lam (q [ p ] $ fst q $ snd q))
                               , Œª Œ≥* f p ‚Üí f (œÄ‚ÇÅ p) (œÄ‚ÇÇ p))
_ = refl

_ : eval (uncurry ++‚Çõ add ++‚Çõ "(3 , 4)") ‚â° inj‚ÇÅ (Nat , (Œª Œ≥* ‚Üí 7))
_ = refl

-- curry is the inverse of uncurry (we get back to where we came from)
_ : eval (curry ++‚Çõ (uncurry ++‚Çõ add)) ‚â° eval add
_ = refl
