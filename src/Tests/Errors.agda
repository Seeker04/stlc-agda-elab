{-# OPTIONS --prop --rewriting --guardedness #-}

module Errors where

open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

-- Syntax errors

_ : compile "isZero"             ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "1 + "               ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile " + 2"               ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "if 0 then 1"        ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "if 0 else 0 then 1" ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "10 ,"               ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "inl"                ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "((10)"              ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile ") false"            ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "()"                 ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile ""                   ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "10 ‚à∑ 20 ‚à∑"          ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "<42> | "            ‚â° inj‚ÇÇ syntax-error
_ = refl

-- Syntax errors in type annotations

_ : compile "(foo) : float"       ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚Üí"           ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ùïÉ ‚Üí"         ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚Üí ùïÉ"         ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚ä§ ‚Üí ‚Üí ‚ä•"     ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚Ñï √ó ‚Ñï √ó"     ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚äé ‚ä§"         ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : List"        ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : Tree ‚Üí List" ‚â° inj‚ÇÇ syntax-error
_ = refl
_ : compile "(foo) : ‚Ñï Stream"    ‚â° inj‚ÇÇ syntax-error
_ = refl

-- Scope errors

_ : compile "foo"                                         ‚â° inj‚ÇÇ scope-error
_ = refl
_ : compile "(Œª foo. bar) : ‚Ñï ‚Üí ‚Ñï"                        ‚â° inj‚ÇÇ scope-error
_ = refl
_ : compile "(Œª x y. if x then y else x + z) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï" ‚â° inj‚ÇÇ scope-error
_ = refl
_ : compile "((Œªx.x) : ‚Ñï ‚Üí ‚Ñï) x"                          ‚â° inj‚ÇÇ scope-error
_ = refl
_ : compile "(((Œªx.x) : ‚Ñï ‚Üí ‚Ñï) 1) + (((Œªy.x) : ‚Ñï ‚Üí ‚Ñï) 2)" ‚â° inj‚ÇÇ scope-error
_ = refl
_ : compile "(Œªx. (((Œªy. y) : ‚Ñï ‚Üí ‚Ñï) 4) + y) : ‚Ñï ‚Üí ‚Ñï"     ‚â° inj‚ÇÇ scope-error
_ = refl

-- Type errors

_ : compile "1 + 2 + nil + 3"            ‚â° inj‚ÇÇ type-error -- cannot add Nat and list
_ = refl
_ : compile "if true then 0 else false"  ‚â° inj‚ÇÇ type-error -- branches have different types
_ = refl
_ : compile "if 42 then 0 else 1"        ‚â° inj‚ÇÇ type-error -- condition must be Bool
_ = refl
_ : compile "Œªx.x"                       ‚â° inj‚ÇÇ type-error -- not annotated, type unknown
_ = refl
_ : compile "10 true"                    ‚â° inj‚ÇÇ type-error -- application on non-function type
_ = refl
_ : compile "(Œªf. f true) : ùïÉ ‚Üí ‚Ñï ‚Üí ‚Ñï"   ‚â° inj‚ÇÇ type-error -- ‚Üí is right associative (we curry by default)
_ = refl
_ : compile "((Œªn . n+1) : ‚Ñï ‚Üí ‚Ñï) false" ‚â° inj‚ÇÇ type-error -- argument has incorrect type
_ = refl
_ : compile "inl 2"                      ‚â° inj‚ÇÇ type-error -- cannot deduce full type
_ = refl
_ : compile "true ‚à∑ (isZero 0)"          ‚â° inj‚ÇÇ type-error -- 2nd operand to cons is not a list
_ = refl
_ : compile "[1, trivial]"               ‚â° inj‚ÇÇ type-error -- different type of elements
_ = refl
_ : compile "[]"                         ‚â° inj‚ÇÇ type-error -- type cannot be deduced
_ = refl
_ : compile "([]) : ‚Ñï"                   ‚â° inj‚ÇÇ type-error -- Nat is not a List type
_ = refl
_ : compile "[0, false, 1]"              ‚â° inj‚ÇÇ type-error -- list is not homogeneous
_ = refl
_ : compile "<0> | (<1> | <true>)"       ‚â° inj‚ÇÇ type-error -- tree is not homogeneous
_ = refl
_ : compile "(inl trivial) : ‚Ñï ‚äé ‚ä§"      ‚â° inj‚ÇÇ type-error -- inl instead of inr
_ = refl
_ : compile "(inr 42)      : ‚Ñï ‚äé ‚ä§"      ‚â° inj‚ÇÇ type-error -- inr instead of inl
_ = refl
