{-# OPTIONS --prop --rewriting --guardedness #-}

module Streams where

open import Data.Bool hiding (not) renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Nat using (suc)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.String using (_++_)
open import Data.Product using (_,_)
open import Data.Unit renaming (tt to triv)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

-- Streams are coinductive types with the constructor: genStream

-- here we construct the infinite streams of even and odd numbers

--                    head op    tail op  seed    -- seed: we start from 0 (from 1 in odds)
evens = "genStream ((Œªn.n):‚Ñï‚Üí‚Ñï) (Œªn.n+2)   0"     -- head op: returns current state (what's in "memory")
                                                  -- tail op: advances stream by adding 2 to the previous state
odds  = "genStream ((Œªn.n):‚Ñï‚Üí‚Ñï) (Œªn.n+2)   1"

_ : compile-eval evens ‚â° inj‚ÇÅ (Ty.Stream Nat
                            , I.genStream (lam q [ p ] $ q) (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                              $ q $ suco (suco zeroo)) [ p ] $ q) zeroo
                            , Œª Œ≥* ‚Üí STLC.genStream (Œª n ‚Üí n) (Œª n ‚Üí ite‚Ñï 2 (Œª m ‚Üí suc m) n) 0)
_ = refl
_ : compile-eval odds  ‚â° inj‚ÇÅ (Ty.Stream Nat
                            , I.genStream (lam q [ p ] $ q) (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                              $ q $ suco (suco zeroo)) [ p ] $ q) (suco zeroo)
                            , Œª Œ≥* ‚Üí STLC.genStream (Œª n ‚Üí n) (Œª n ‚Üí ite‚Ñï 2 (Œª m ‚Üí suc m) n) 1)
_ = refl

-- destructors: head (returns result) and tail (advances a stream by constructing a new one from the old state)

_ : eval ("head"           ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval ("head tail"      ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 2)
_ = refl
_ : eval ("head tail tail" ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 4)
_ = refl

_ : eval ("head"           ++ odds) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 1)
_ = refl
_ : eval ("head tail"      ++ odds) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 3)
_ = refl
_ : eval ("head tail tail" ++ odds) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 5)
_ = refl

-- generating the trivial lists of all lengths

trivial-lists = "genStream ((Œªts.ts):[‚ä§]‚Üí[‚ä§]) (Œª ts. trivial ‚à∑ ts) (nil : [‚ä§])"

_ : compile-eval trivial-lists ‚â° inj‚ÇÅ (Ty.Stream (Ty.List Unit)
                                    , I.genStream (lam q [ p ] $ q) (lam (cons trivial q) [ p ] $ q) nil
                                    , Œª Œ≥* ‚Üí STLC.genStream (Œª ts ‚Üí ts) (Œª ts ‚Üí triv ‚à∑ ts) [])
_ = refl

_ : eval ("head"           ++ trivial-lists) ‚â° inj‚ÇÅ (Ty.List Unit , Œª Œ≥* ‚Üí [])
_ = refl
_ : eval ("head tail"      ++ trivial-lists) ‚â° inj‚ÇÅ (Ty.List Unit , Œª Œ≥* ‚Üí triv ‚à∑ [])
_ = refl
_ : eval ("head tail tail" ++ trivial-lists) ‚â° inj‚ÇÅ (Ty.List Unit , Œª Œ≥* ‚Üí triv ‚à∑ (triv ‚à∑ []))
_ = refl

-- generating the lists of the first n naturals for all n ‚àà ‚Ñï

length = "((Œª ns. iteList 0 (Œª _ n. n+1) ns) : [‚Ñï] ‚Üí ‚Ñï)"

first-n = "genStream ((Œªns.ns):[‚Ñï]‚Üí[‚Ñï]) (Œª ns. (" ++ length ++ " ns) ‚à∑ ns) (nil : [‚Ñï])"

_ : compile-eval first-n ‚â° inj‚ÇÅ (Ty.Stream (Ty.List Nat)
                              , I.genStream (lam q [ p ] $ q) (lam (cons (lam (I.iteList zeroo
                                ((lam (lam (lam (lam (iteNat q (suco q) (q [ p ]))) $ q $ suco zeroo))
                                [ p ] $ q) [ p ] $ q) q) $ q) q) [ p ] $ q) nil
                              , Œª Œ≥* ‚Üí STLC.genStream (Œª ns ‚Üí ns)
                                                      (Œª ns ‚Üí STLC.iteList 0 (Œª _ n ‚Üí ite‚Ñï 1 (Œª m ‚Üí suc m) n) ns ‚à∑ ns)
                                                      [])
_ = refl

_ : eval ("head"                ++ first-n) ‚â° inj‚ÇÅ (Ty.List Nat , (Œª Œ≥* ‚Üí []))
_ = refl
_ : eval ("head tail"           ++ first-n) ‚â° inj‚ÇÅ (Ty.List Nat , (Œª Œ≥* ‚Üí 0 ‚à∑ []))
_ = refl
_ : eval ("head tail tail"      ++ first-n) ‚â° inj‚ÇÅ (Ty.List Nat , (Œª Œ≥* ‚Üí 1 ‚à∑ (0 ‚à∑ [])))
_ = refl
_ : eval ("head tail tail tail" ++ first-n) ‚â° inj‚ÇÅ (Ty.List Nat , (Œª Œ≥* ‚Üí 2 ‚à∑ (1 ‚à∑ (0 ‚à∑ []))))
_ = refl

-- of course, we can parameterize genStream by returning it from a function

step-n = "(Œª start diff. genStream ((Œªn.n):‚Ñï‚Üí‚Ñï) (Œªn. n+diff) start) : ‚Ñï ‚Üí ‚Ñï ‚Üí (Stream ‚Ñï)"

_ : compile-eval step-n ‚â° inj‚ÇÅ (Nat ‚áí Nat ‚áí Ty.Stream Nat
                             , lam (lam (I.genStream (lam q [ p ] $ q) (lam (lam (lam
                               (iteNat q (suco q) (q [ p ]))) $ q $ q [ p ]) [ p ] $ q) (q [ p ])))
                             , (Œª Œ≥* start diff ‚Üí STLC.genStream (Œª n ‚Üí n) (Œª n ‚Üí ite‚Ñï diff (Œª m ‚Üí suc m) n) start))
_ = refl

_ : eval ("head           ((" ++ step-n ++ ") 10) 5") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 10)
_ = refl
_ : eval ("head tail      ((" ++ step-n ++ ") 10) 5") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 15)
_ = refl
_ : eval ("head tail tail ((" ++ step-n ++ ") 10) 5") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 20)
_ = refl

_ : eval ("head           ((" ++ step-n ++ ") 0) 33") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval ("head tail      ((" ++ step-n ++ ") 0) 33") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 33)
_ = refl
_ : eval ("head tail tail ((" ++ step-n ++ ") 0) 33") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 66)
_ = refl

-- but writing out a lot of tails to get later elements can get tiring...

-- so let's extract the nth (indexed from 0) element

get-nth = "(Œª s n. head ite‚Ñï s (Œª ss. tail ss) n) : (Stream ‚Ñï) ‚Üí ‚Ñï ‚Üí ‚Ñï"

_ : compile-eval get-nth ‚â° inj‚ÇÅ (Ty.Stream Nat ‚áí Nat ‚áí Nat
                              , lam (lam (head (iteNat (q [ p ]) (lam (tail q) [ p ] $ q) q)))
                              , (Œª Œ≥* s n ‚Üí Stream.head (ite‚Ñï s Stream.tail n)))
_ = refl

_ : eval (get-nth ++‚Çõ odds  ++‚Çõ  "8") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 17)
_ = refl
_ : eval (get-nth ++‚Çõ evens ++‚Çõ "13") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 26)
_ = refl

_ : eval ("((" ++ get-nth ++ ") (((" ++ step-n ++ ") 100) 25))" ++ "3") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 175)
_ = refl
_ : eval ("((" ++ get-nth ++ ") (((" ++ step-n ++ ")   0) 30))" ++ "5") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 150)
_ = refl

-- did we just accidentally reinvent multiplication? :-)
