{-# OPTIONS --prop --rewriting --guardedness #-}

module Lists where

open import Data.Bool hiding (not) renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Nat using (suc)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.String using (_++_)
open import Data.Product using (_,_)
open import Data.Unit renaming (tt to triv)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

-- constructors: nil and ‚à∑ (often called cons)

-- type of list cannot be infered in this case, so it must be annotated
_ : compile-eval "nil : List ‚Ñï" ‚â° inj‚ÇÅ (Ty.List Nat , nil , Œª _ ‚Üí [])
_ = refl

-- shorter notation for list types:
_ : compile-eval "nil : [‚Ñï]" ‚â° inj‚ÇÅ (Ty.List Nat , nil , Œª _ ‚Üí [])
_ = refl

-- now type can be infered from the head of the list
_ : compile-eval "2 ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List Nat , cons (suco (suco zeroo)) nil , Œª Œ≥* ‚Üí 2 ‚à∑ [])
_ = refl
_ : compile-eval "true ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List Bool , cons true nil , Œª Œ≥* ‚Üí tt ‚à∑ [])
_ = refl

-- we can chain _‚à∑_ (it's right associative)
_ : compile-eval "2 ‚à∑ 1 ‚à∑ 0 ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List Nat , cons (suco (suco zeroo)) (cons (suco zeroo) (cons zeroo nil))
                                                       , Œª Œ≥* ‚Üí 2 ‚à∑ (1 ‚à∑ (0 ‚à∑ [])))
_ = refl
_ : compile-eval "true ‚à∑ false ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List Bool , cons true (cons false nil)
                                           , Œª Œ≥* ‚Üí tt ‚à∑ (ff ‚à∑ []))
_ = refl

-- list of lists
_ : compile-eval "(0 ‚à∑ 2 ‚à∑ nil) ‚à∑ (1 ‚à∑ nil) ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List (Ty.List Nat)
                                , cons (cons zeroo (cons (suco (suco zeroo)) nil)) (cons (cons (suco zeroo) nil) nil)
                                , Œª Œ≥* ‚Üí (0 ‚à∑ (2 ‚à∑ [])) ‚à∑ ((1 ‚à∑ []) ‚à∑ []))
_ = refl

-- list of pairs
_ : compile-eval "(0,true) ‚à∑ (1,false) ‚à∑ (2,true) ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List (Nat √óo Bool)
                                                              ,  cons ‚ü®            zeroo  , true ‚ü©
                                                                (cons ‚ü®       suco zeroo  , false ‚ü©
                                                                (cons ‚ü® suco (suco zeroo) , true ‚ü© nil))
                                                              , (Œª Œ≥* ‚Üí (0 , tt) ‚à∑ ((1 , ff) ‚à∑ ((2 , tt) ‚à∑ []))))
_ = refl

-- list of trees
_ : compile-eval "(<1> | (<2> | <0>)) ‚à∑ (<3> | <0>) ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List (Ty.Tree Nat)
                                                                , cons (I.node (I.leaf (suco zeroo))
                                                                               (I.node (I.leaf (suco (suco zeroo)))
                                                                                       (I.leaf zeroo)))
                                                                 (cons (I.node (I.leaf (suco (suco (suco zeroo))))
                                                                               (I.leaf zeroo))
                                                                  nil)
                                                                , Œª Œ≥* ‚Üí Tree.node (Tree.leaf 1)
                                                                                   (Tree.node (Tree.leaf 2)
                                                                                              (Tree.leaf 0))
                                                                      ‚à∑ (Tree.node (Tree.leaf 3)
                                                                                   (Tree.leaf 0)
                                                                      ‚à∑ []))
_ = refl

-- using the alternative (Haskell-like) syntax, we get the same terms

_ : compile-eval "([]) : [‚Ñï]"    ‚â° compile-eval "nil : [‚Ñï]"
_ = refl
_ : compile-eval "[2]"           ‚â° compile-eval "2 ‚à∑ nil"
_ = refl
_ : compile-eval "[true]"        ‚â° compile-eval "true ‚à∑ nil"
_ = refl
_ : compile-eval "[2, 1, 0]"     ‚â° compile-eval "2 ‚à∑ 1 ‚à∑ 0 ‚à∑ nil"
_ = refl
_ : compile-eval "[true, false]" ‚â° compile-eval "true ‚à∑ false ‚à∑ nil"
_ = refl
_ : compile-eval "(0,true) ‚à∑ (1,false) ‚à∑ (2,true) ‚à∑ nil" ‚â° compile-eval "[(0,true),(1,false),(2,true)]"
_ = refl

-- note: nested lists using this alternative syntax do not work yet

-- some well-known functions using the iterator of lists
--   note: some of these would make sense with any [A], but we cannot write polymorphic functions, so we'll stick with [‚Ñï]

-- empty check

isnil = "(Œª xs. iteList true (Œª _ _.false) xs) : [‚Ñï] ‚Üí ùïÉ"

_ : compile-eval isnil ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Bool , lam (I.iteList true ((lam (lam false) [ p ] $ q) [ p ] $ q) q)
                                                  , Œª Œ≥* xs ‚Üí STLC.iteList tt (Œª _ _ ‚Üí ff) xs)
_ = refl

_ : eval (isnil ++‚Çõ "[]") ‚â° inj‚ÇÅ (Bool , Œª Œ≥* ‚Üí tt)
_ = refl
_ : eval (isnil ++‚Çõ "[0]") ‚â° inj‚ÇÅ (Bool , Œª Œ≥* ‚Üí ff)
_ = refl

-- length

length = "(Œª xs. iteList 0 (Œª _ x. x+1) xs) : [‚Ñï] ‚Üí ‚Ñï"

_ : compile-eval length ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Nat , lam (I.iteList zeroo ((lam (lam (iteNat (suco zeroo) (suco q) q))
                                                    [ p ] $ q) [ p ] $ q) q)
                                                  , Œª Œ≥* xs ‚Üí STLC.iteList 0 (Œª x y ‚Üí ite‚Ñï 1 (Œª z ‚Üí suc z) y) xs)
_ = refl

_ : eval (length ++‚Çõ "[]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval (length ++‚Çõ "[1,2,3,4,5]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 5)
_ = refl

-- folding (iteList could be called foldl)

sum = "(Œª xs. iteList 0 (Œª x y. x + y) xs) : [‚Ñï] ‚Üí ‚Ñï"

_ : compile-eval sum ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Nat , lam (I.iteList zeroo ((lam (lam (iteNat q (suco q) (q [ p ])))
                                                 [ p ] $ q) [ p ] $ q) q)
                                               , Œª Œ≥* xs ‚Üí STLC.iteList 0 (Œª x y ‚Üí ite‚Ñï y (Œª z ‚Üí suc z) x) xs)
_ = refl

_ : eval (sum ++‚Çõ "[]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval (sum ++‚Çõ "[10, 7, 20, 1]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 38)
_ = refl

-- concatenation

concat = "(Œª xs ys. iteList ys (Œª a as. a ‚à∑ as) xs) : [‚Ñï] ‚Üí [‚Ñï] ‚Üí [‚Ñï]"

_ : compile-eval concat ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Ty.List Nat ‚áí Ty.List Nat
                               , lam (lam (I.iteList q ((lam (lam (cons (q [ p ]) q)) [ p ] $ q) [ p ] $ q) (q [ p ])))
                               , Œª Œ≥* xs ys ‚Üí STLC.iteList ys (Œª a as ‚Üí a ‚à∑ as) xs)
_ = refl

_ : eval (concat ++‚Çõ "[]" ++‚Çõ "[]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí [])
_ = refl
_ : eval (concat ++‚Çõ "[3,1]" ++‚Çõ "[4,1,5]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí 3 ‚à∑ (1 ‚à∑ (4 ‚à∑ (1 ‚à∑ (5 ‚à∑ [])))))
_ = refl

-- total implementation of head, which returns an error on empty lists (we simulate Maybe with ‚ä§ ‚äé ‚Ñï)

headM = "(Œª xs. iteList ((inl trivial) : ‚ä§ ‚äé ‚Ñï) (Œª a as. ((inr a) : ‚ä§ ‚äé ‚Ñï)) xs) : [‚Ñï] ‚Üí ‚ä§ ‚äé ‚Ñï"

_ : compile-eval headM ‚â° inj‚ÇÅ (Ty.List Nat ‚áí (Unit +o Nat)
                            , lam (I.iteList (inl trivial) ((lam (lam (inr (q [ p ]))) [ p ] $ q) [ p ] $ q) q)
                            , Œª Œ≥* xs ‚Üí STLC.iteList (inj‚ÇÅ triv) (Œª a as ‚Üí inj‚ÇÇ a) xs)
_ = refl

_ : eval (headM ++‚Çõ "[]") ‚â° inj‚ÇÅ (Unit +o Nat , Œª Œ≥* ‚Üí inj‚ÇÅ triv)
_ = refl
_ : eval (headM ++‚Çõ "[2,4,6]") ‚â° inj‚ÇÅ (Unit +o Nat , Œª Œ≥* ‚Üí inj‚ÇÇ 2)
_ = refl

-- filtering

not  = "((Œª a. if a then false else true) : ùïÉ ‚Üí ùïÉ)" 

even = "((Œª x. ite‚Ñï true (Œªa." ++ not ++ "a) x) : ‚Ñï ‚Üí ùïÉ)" -- explained in Nats.agda

filter = "(Œª f xs. iteList (nil : [‚Ñï]) (Œª a as. if (f a) then a ‚à∑ as else as) xs) : (‚Ñï ‚Üí ùïÉ) ‚Üí [‚Ñï] ‚Üí [‚Ñï]"

_ : compile-eval filter ‚â° inj‚ÇÅ ((Nat ‚áí Bool) ‚áí Ty.List Nat ‚áí Ty.List Nat ,
                               lam (lam (I.iteList nil ((lam (lam (iteBool (cons (q [ p ]) q) q
                               (q [ p ] [ p ] [ p ] $ q [ p ]))) [ p ] $ q) [ p ] $ q) q))
                             , Œª Œ≥* f xs ‚Üí STLC.iteList [] (Œª a as ‚Üí if f a then a ‚à∑ as else as) xs)
_ = refl

_ : eval (filter ++‚Çõ even ++‚Çõ "[]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí [])
_ = refl
_ : eval (filter ++‚Çõ even ++‚Çõ "[1,2,3,4,5,6,7,8]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí 2 ‚à∑ (4 ‚à∑ (6 ‚à∑ (8 ‚à∑ []))))
_ = refl

-- mapping

double = "(Œª x. x+x) : ‚Ñï ‚Üí ‚Ñï"

map = "(Œª f xs. iteList (nil : [‚Ñï]) (Œª a as. (f a) ‚à∑ as) xs) : (‚Ñï ‚Üí ‚Ñï) ‚Üí [‚Ñï] ‚Üí [‚Ñï]"

_ : compile-eval map ‚â° inj‚ÇÅ ((Nat ‚áí Nat) ‚áí Ty.List Nat ‚áí Ty.List Nat
                          , lam (lam (I.iteList nil ((lam (lam (cons (q [ p ] [ p ] [ p ] $ q [ p ]) q))
                            [ p ] $ q) [ p ] $ q) q))
                          , Œª Œ≥* f xs ‚Üí STLC.iteList [] (Œª a as ‚Üí f a ‚à∑ as) xs)
_ = refl

_ : eval (map ++‚Çõ double ++‚Çõ "[3,0,11,23]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí 6 ‚à∑ (0 ‚à∑ (22 ‚à∑ (46 ‚à∑ []))))
_ = refl
_ : eval (map ++‚Çõ double ++‚Çõ "[]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí [])
_ = refl

-- replicating

replicate = "(Œª n x. ite‚Ñï (nil : [‚Ñï]) (Œª xs. x ‚à∑ xs) n) : ‚Ñï ‚Üí ‚Ñï ‚Üí [‚Ñï]"

_ : compile-eval replicate ‚â° inj‚ÇÅ (Nat ‚áí Nat ‚áí Ty.List Nat
                                , lam (lam (iteNat nil (lam (cons (q [ p ]) q) [ p ] $ q) (q [ p ])))
                                , Œª Œ≥* n x ‚Üí ite‚Ñï [] (Œª xs ‚Üí x ‚à∑ xs) n)
_ = refl

_ : eval (replicate ++‚Çõ "4" ++‚Çõ "42") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí 42 ‚à∑ (42 ‚à∑ (42 ‚à∑ (42 ‚à∑ []))))
_ = refl
_ : eval (replicate ++‚Çõ "0" ++‚Çõ "42") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí [])
_ = refl
