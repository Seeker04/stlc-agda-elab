{-# OPTIONS --prop --rewriting --guardedness #-}

open import Level hiding (suc)
open import Agda.Builtin.Sigma using (Œ£)
open import Data.Bool renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Fin using (Fin; zero; suc)
open import Data.String using (String)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.List using (List; _‚à∑_; [])
open import Data.Product using (_√ó_; _,_)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (case_of_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Lexer
open import Text.Lexer keywords breaking default
open import Parser Level.zero hiding (_‚áí_; num)
open import Scopecheck hiding (lookup)
open import Typecheck

open import STLC
open STLC.I
module St = Model St

--------------------------------------
-- Elaboration

-- elaborate     returns each intermediate step of the process
-- compile-eval  returns error or compiled program and its evaluation in the standard model
-- compile       returns error or compiled program
-- eval          returns error or evaluation
-- compileM      Maybe version of compile
-- evalM         Maybe version of eval

Program    = Œ£ Ty Œª A ‚Üí Tm ‚óá A                    -- a term with its type that is valid in the empty context
Evaluation = Œ£ Ty Œª A ‚Üí St.Tm St.‚ü¶ ‚óá ‚üßC St.‚ü¶ A ‚üßT -- interpretation in the standard model (which Agda can normalise for us)
ProgEval   = Œ£ Ty Œª A ‚Üí (Tm ‚óá A √ó St.Tm St.‚ü¶ ‚óá ‚üßC St.‚ü¶ A ‚üßT)

elaborate : String ‚Üí Maybe ((Data.List.List Token) √ó Maybe (AST √ó Maybe (ABT 0 √ó Maybe ProgEval)))
elaborate code = case just (tokenize code)                     of Œª where
  nothing               ‚Üí nothing
  (just tokens)         ‚Üí case parse code                      of Œª where
    nothing             ‚Üí just (tokens , nothing)
    (just ast)          ‚Üí case scopecheck ast                  of Œª where
      nothing           ‚Üí just (tokens , just (ast , nothing))
      (just abt)        ‚Üí case infer ‚óá abt                     of Œª where
        nothing         ‚Üí just (tokens , just (ast , just (abt , nothing)))
        (just (A , tm)) ‚Üí just (tokens , just (ast , just (abt , just (A , (tm , St.‚ü¶ tm ‚üßt)))))

-- note: putting `parse code` into a with abstraction leads Agda 2.6.2.2 to an infinite loop for some reason,
--       but thankfully, case_of_ does not

data Error : Set where
  lexical-error : Error
  syntax-error  : Error
  scope-error   : Error
  type-error    : Error

compile-eval : String ‚Üí ProgEval ‚äé Error
compile-eval code = case elaborate code of Œª where
  nothing                                        ‚Üí inj‚ÇÇ lexical-error
  (just (_  , nothing))                          ‚Üí inj‚ÇÇ syntax-error
  (just (_ , just (_ , nothing)))                ‚Üí inj‚ÇÇ scope-error
  (just (_ , just (_ , just(_ , nothing))))      ‚Üí inj‚ÇÇ type-error
  (just (_ , just (_ , just(_ , just tm-eval)))) ‚Üí inj‚ÇÅ tm-eval

compile : String ‚Üí Program ‚äé Error
compile code = case compile-eval code of Œª where
  (inj‚ÇÇ error)        ‚Üí inj‚ÇÇ error
  (inj‚ÇÅ (A , tm , _)) ‚Üí inj‚ÇÅ (A , tm)

eval : String ‚Üí Evaluation ‚äé Error
eval code = case compile-eval code of Œª where
  (inj‚ÇÇ error)          ‚Üí inj‚ÇÇ error
  (inj‚ÇÅ (A , _ , eval)) ‚Üí inj‚ÇÅ (A , eval)

compileM : String ‚Üí Maybe Program
compileM code = case compile code of Œª where
  (inj‚ÇÇ _)  ‚Üí nothing
  (inj‚ÇÅ tm) ‚Üí just tm

evalM : String ‚Üí Maybe Evaluation
evalM code = case eval code of Œª where
  (inj‚ÇÇ _)    ‚Üí nothing
  (inj‚ÇÅ eval) ‚Üí just eval

--------------------------------------
-- Examples (see: Tests.agda for more)

private
  _ : elaborate "(Œª x. isZero x) : ‚Ñï ‚Üí ùïÉ" ‚â° just ((record { line = 0 ; offset =  0 } , t-lpar   ) ‚à∑
                                                  (record { line = 0 ; offset =  1 } , t-Œª      ) ‚à∑
                                                  (record { line = 0 ; offset =  3 } , t-var "x") ‚à∑
                                                  (record { line = 0 ; offset =  4 } , t-dot    ) ‚à∑
                                                  (record { line = 0 ; offset =  6 } , t-isZero ) ‚à∑
                                                  (record { line = 0 ; offset = 13 } , t-var "x") ‚à∑
                                                  (record { line = 0 ; offset = 14 } , t-rpar   ) ‚à∑
                                                  (record { line = 0 ; offset = 16 } , t-:      ) ‚à∑
                                                  (record { line = 0 ; offset = 18 } , t-‚Ñï      ) ‚à∑
                                                  (record { line = 0 ; offset = 20 } , t-‚Üí      ) ‚à∑
                                                  (record { line = 0 ; offset = 22 } , t-ùïÉ      ) ‚à∑ [] ,
                                                  just (s-ann (s-Œª ("x" ‚à∑ []) (s-isZero (s-var "x"))) (s-Nat s-‚Üí s-Bool) ,
                                                  just (abt-ann (abt-Œª (abt-isZero (abt-var Fin.zero))) (s-Nat s-‚Üí s-Bool) ,
                                                  just (Nat ‚áí Bool , lam (iteNat true false q) ,
                                                                     (Œª Œ≥* Œ±* ‚Üí ite‚Ñï tt (Œª x ‚Üí ff) Œ±*)))))
  _ = refl

  _ : compile-eval "1 + 2 + 3" ‚â° inj‚ÇÅ (Nat , (lam (lam (iteNat q (suco q) (q [ p ]))) $
                                             (lam (lam (iteNat q (suco q) (q [ p ]))) $
                                             suco zeroo $ suco (suco zeroo)) $ suco (suco (suco zeroo)))
                                           , Œª Œ≥* ‚Üí 6)
  _ = refl

  _ : compile "if true then else" ‚â° inj‚ÇÇ syntax-error
  _ = refl
  _ : compile "10 + "             ‚â° inj‚ÇÇ syntax-error
  _ = refl
  _ : compile "10 + foo"          ‚â° inj‚ÇÇ scope-error
  _ = refl
  _ : compile "10 + true"         ‚â° inj‚ÇÇ type-error
  _ = refl
  _ : compile "[1, 2, true, 4]"   ‚â° inj‚ÇÇ type-error
  _ = refl
  _ : compile "(Œªx.x) : ‚Ñï ‚Üí ‚Ñï"    ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam q)
  _ = refl

  _ : eval "if isZero 0 then [1,2,(1+2)] else [42]" ‚â° inj‚ÇÅ (Ty.List Nat , (Œª Œ≥* ‚Üí 1 ‚à∑ (2 ‚à∑ (3 ‚à∑ []))))
  _ = refl
