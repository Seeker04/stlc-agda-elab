module Lexer where

open import Level
open import Level.Bounded using ([_])
open import Agda.Builtin.Nat using (_-_)

open import Data.Unit.Base using (‚ä§; tt)
open import Data.Bool
open import Data.Char.Base
open import Data.Nat renaming (_‚âü_ to _‚âü‚Ñï_)
open import Data.String as String hiding (parens; length)
open import Data.String.Properties renaming (_‚âü_ to _‚âüstr_)
open import Data.Product using (_√ó_; _,_; ‚àÉ)
open import Data.List.Base as List using (List; _‚à∑_; []; length)
open import Data.List.NonEmpty as List‚Å∫ using (List‚Å∫; _‚à∑_)
open import Data.Maybe.Base using (Maybe; nothing; just)
open import Function.Base
open import Relation.Nullary using (yes; no)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong)

open import Text.Parser.Position

--------------------------------------
-- Parameters for lexing

data Tok : Set where
  t-true       : Tok
  t-false      : Tok
  t-if         : Tok
  t-then       : Tok
  t-else       : Tok
  t-isZero     : Tok
  t-+          : Tok
  t-num        : ‚Ñï ‚Üí Tok
  t-Œª          : Tok
  t-var        : String ‚Üí Tok
  t-dot        : Tok

  t-:          : Tok  -- for type annotations
  t-‚Ñï          : Tok
  t-ùïÉ          : Tok
  t-‚Üí          : Tok
  t-‚ä§          : Tok
  t-‚ä•          : Tok
  t-√ó          : Tok
  t-‚äé          : Tok
  t-List       : Tok
  t-Tree       : Tok
  t-Stream     : Tok
  t-Machine    : Tok

  t-triv       : Tok  -- products
  t-,          : Tok
  t-fst        : Tok
  t-snd        : Tok

  t-inl        : Tok  -- sums
  t-inr        : Tok
  t-case       : Tok
  t-or         : Tok

  t-‚à∑          : Tok  -- lists
  t-nil        : Tok
  t-[          : Tok
  t-]          : Tok

  t-|          : Tok  -- trees, e.g. <a> | (<b> | <c>)
  t-<          : Tok
  t->          : Tok

  t-ite‚Ñï       : Tok  -- iterators ite‚ä§ is left out, because its useless
  t-iteList    : Tok  --           if_then_else_ and case are used for Bools and Sums
  t-iteTree    : Tok

  t-head       : Tok  -- streams
  t-tail       : Tok
  t-genStream  : Tok

  t-put        : Tok  -- machines
  t-set        : Tok
  t-get        : Tok
  t-genMachine : Tok

  t-lpar       : Tok  -- parentheses
  t-rpar       : Tok

eq-tok : Decidable {A = Tok} _‚â°_
eq-tok t-true       t-true       = yes refl
eq-tok t-false      t-false      = yes refl
eq-tok t-if         t-if         = yes refl
eq-tok t-then       t-then       = yes refl
eq-tok t-else       t-else       = yes refl
eq-tok t-isZero     t-isZero     = yes refl
eq-tok t-+          t-+          = yes refl
eq-tok (t-num n) (t-num m) with n ‚âü‚Ñï m
... | yes eq = yes (cong t-num eq)
... | no ¬¨eq = no Œª hyp ‚Üí ¬¨eq (cong (Œª { (t-num n) ‚Üí n ; _ ‚Üí 0}) hyp)
eq-tok t-Œª t-Œª = yes refl
eq-tok (t-var name) (t-var name') with name ‚âüstr name'
... | yes eq = yes (cong t-var eq)
... | no ¬¨eq = no Œª hyp ‚Üí ¬¨eq (cong (Œª { (t-var s) ‚Üí s ; _ ‚Üí ""}) hyp)
eq-tok t-dot        t-dot        = yes refl
eq-tok t-:          t-:          = yes refl
eq-tok t-‚Ñï          t-‚Ñï          = yes refl
eq-tok t-ùïÉ          t-ùïÉ          = yes refl
eq-tok t-‚Üí          t-‚Üí          = yes refl
eq-tok t-‚ä§          t-‚ä§          = yes refl
eq-tok t-‚ä•          t-‚ä•          = yes refl
eq-tok t-√ó          t-√ó          = yes refl
eq-tok t-‚äé          t-‚äé          = yes refl
eq-tok t-List       t-List       = yes refl
eq-tok t-Tree       t-Tree       = yes refl
eq-tok t-Stream     t-Stream     = yes refl
eq-tok t-Machine    t-Machine    = yes refl
eq-tok t-triv       t-triv       = yes refl
eq-tok t-,          t-,          = yes refl
eq-tok t-fst        t-fst        = yes refl
eq-tok t-snd        t-snd        = yes refl
eq-tok t-inl        t-inl        = yes refl
eq-tok t-inr        t-inr        = yes refl
eq-tok t-case       t-case       = yes refl
eq-tok t-or         t-or         = yes refl
eq-tok t-‚à∑          t-‚à∑          = yes refl
eq-tok t-nil        t-nil        = yes refl
eq-tok t-[          t-[          = yes refl
eq-tok t-]          t-]          = yes refl
eq-tok t-|          t-|          = yes refl
eq-tok t-<          t-<          = yes refl
eq-tok t->          t->          = yes refl
eq-tok t-ite‚Ñï       t-ite‚Ñï       = yes refl
eq-tok t-iteList    t-iteList    = yes refl
eq-tok t-iteTree    t-iteTree    = yes refl
eq-tok t-head       t-head       = yes refl
eq-tok t-tail       t-tail       = yes refl
eq-tok t-genStream  t-genStream  = yes refl
eq-tok t-put        t-put        = yes refl
eq-tok t-set        t-set        = yes refl
eq-tok t-get        t-get        = yes refl
eq-tok t-genMachine t-genMachine = yes refl
eq-tok t-lpar       t-lpar       = yes refl
eq-tok t-rpar       t-rpar       = yes refl
eq-tok _ _ = no no-more-eq where
  private postulate no-more-eq : ‚àÄ {A} ‚Üí A

Token : Set
Token = Position √ó Tok

keywords : List‚Å∫ (String √ó Tok)
keywords = ("true"  , t-true)   ‚à∑ ("false", t-false) ‚à∑ ("if"    , t-if)     ‚à∑ ("then"   , t-then)    ‚à∑ ("else"   , t-else) ‚à∑
           ("isZero", t-isZero) ‚à∑ ("‚Ñï"    , t-‚Ñï)     ‚à∑ ("ùïÉ"     , t-ùïÉ)      ‚à∑ ("‚ä§"      , t-‚ä§)       ‚à∑ ("‚ä•"      , t-‚ä•)    ‚à∑
           ("List"  , t-List)   ‚à∑ ("Tree" , t-Tree)  ‚à∑ ("Stream", t-Stream) ‚à∑ ("Machine", t-Machine) ‚à∑ ("trivial", t-triv) ‚à∑
           ("fst"   , t-fst)    ‚à∑ ("snd"  , t-snd)   ‚à∑ ("inl"   , t-inl)    ‚à∑ ("inr"    , t-inr)     ‚à∑ ("case"   , t-case) ‚à∑
           ("or"    , t-or)     ‚à∑ ("nil"  , t-nil)   ‚à∑ ("ite‚Ñï"  , t-ite‚Ñï)   ‚à∑ ("iteList", t-iteList) ‚à∑ ("iteTree", t-iteTree) ‚à∑
           ("head"  , t-head)   ‚à∑ ("tail" , t-tail)  ‚à∑ ("genStream" , t-genStream) ‚à∑ ("put" , t-put) ‚à∑ ("set", t-set) ‚à∑
           ("get"   , t-get)    ‚à∑ ("genMachine" , t-genMachine) ‚à∑ []

breaking : Char ‚Üí ‚àÉ Œª b ‚Üí if b then Maybe Tok else Lift _ ‚ä§
breaking c = case c of Œª where  -- whitespaces as well as symbols are separators between tokens
  '+'  ‚Üí true , just t-+
  'Œª'  ‚Üí true , just t-Œª
  '.'  ‚Üí true , just t-dot
  ':'  ‚Üí true , just t-:
  '‚Üí'  ‚Üí true , just t-‚Üí
  '√ó'  ‚Üí true , just t-√ó
  '‚äé'  ‚Üí true , just t-‚äé
  ','  ‚Üí true , just t-,
  '‚à∑'  ‚Üí true , just t-‚à∑
  '['  ‚Üí true , just t-[
  ']'  ‚Üí true , just t-]
  '|'  ‚Üí true , just t-|
  '<'  ‚Üí true , just t-<
  '>'  ‚Üí true , just t->
  '('  ‚Üí true , just t-lpar
  ')'  ‚Üí true , just t-rpar
  c    ‚Üí if isSpace c then true , nothing else false , _

listch‚áí‚Ñï : List Char ‚Üí Maybe ‚Ñï  -- note: leading zeros are ignored, i.e., "003042" ‚áí 3042
listch‚áí‚Ñï [] = nothing
listch‚áí‚Ñï = step 0 where
  step : ‚Ñï ‚Üí List Char ‚Üí Maybe ‚Ñï
  step n [] = just n
  step n (c ‚à∑ cs) = if isDigit c then
                      step (n + (pow 10 (length cs)) * (to‚Ñï c - 48)) cs
                    else
                      nothing where
    pow : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
    pow b = Œª { 0 ‚Üí 1 ; (suc e) ‚Üí b * (pow b e)}

default : String ‚Üí Tok
default s = case (listch‚áí‚Ñï (toList s)) of Œª where
  (just n) ‚Üí t-num n
  nothing  ‚Üí t-var s  -- if not a keyword, check if it's a number, if not it's a var name

--------------------------------------
-- Examples (see: Tests/ for more)

private
  open import Text.Lexer keywords breaking default using (tokenize)
  open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

  _ : tokenize "Œªx.x" ‚â° (record { line = 0 ; offset = 0 } , t-Œª      ) ‚à∑
                        (record { line = 0 ; offset = 1 } , t-var "x") ‚à∑
                        (record { line = 0 ; offset = 2 } , t-dot    ) ‚à∑
                        (record { line = 0 ; offset = 3 } , t-var "x") ‚à∑ []
  _ = refl

  _ : tokenize " isZero (10+  foo)" ‚â° (record { line = 0 ; offset =  1 } , t-isZero   ) ‚à∑
                                      (record { line = 0 ; offset =  8 } , t-lpar     ) ‚à∑
                                      (record { line = 0 ; offset =  9 } , t-num 10   ) ‚à∑
                                      (record { line = 0 ; offset = 11 } , t-+        ) ‚à∑
                                      (record { line = 0 ; offset = 14 } , t-var "foo") ‚à∑
                                      (record { line = 0 ; offset = 17 } , t-rpar     ) ‚à∑ []
  _ = refl

  _ : tokenize "if bar then 0 else 1" ‚â° (start , t-if) ‚à∑
                                        (record { line = 0 ; offset =  3 } , t-var "bar") ‚à∑
                                        (record { line = 0 ; offset =  7 } , t-then     ) ‚à∑
                                        (record { line = 0 ; offset = 12 } , t-num 0    ) ‚à∑
                                        (record { line = 0 ; offset = 14 } , t-else     ) ‚à∑
                                        (record { line = 0 ; offset = 19 } , t-num 1    ) ‚à∑ []
  _ = refl
