{-# OPTIONS --prop --rewriting --guardedness #-}

module Tests where

-- This module aims to be an extensive testing of the elaboration library
-- It also functions as a store of examples for the interested
--
-- If you wish to see all steps of an elaboration, run `elaborate <code>`
-- (for example, if you want to find out why something doesn't compile)
--
-- The amount of examples makes typechecking this file a little slow (5-10 secs), so it can be a
-- more pleasant experience to copy the imports to a new file and work there on new code

-- TODO: typechecking this file is quite slow, divide tests between different files instead
-- TODO: add more tests

open import Data.Bool hiding (not) renaming (Bool to ùüö; true to tt; false to ff)
open import Data.Nat using (suc)
open import Data.String using (String; parens; _++_)
open import Data.Maybe using (Maybe; just; nothing)
open import Data.Product using (_√ó_; _,_) renaming (proj‚ÇÅ to œÄ‚ÇÅ; proj‚ÇÇ to œÄ‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ; [_,_]‚Ä≤)
open import Function using (case_of_)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Elaborator
open import STLC
open STLC.I

_ : compile-eval "3" ‚â° inj‚ÇÅ (Nat , suco (suco (suco zeroo))
                                 , Œª Œ≥* ‚Üí 3)
_ = refl
_ : compile-eval "isZero 2" ‚â° inj‚ÇÅ (Bool , iteNat true false (suco (suco zeroo))
                                         , Œª Œ≥* ‚Üí ff)
_ = refl

_ : compile-eval "if isZero 0 then 1 else 0" ‚â° inj‚ÇÅ (Nat , iteBool (suco zeroo) zeroo (iteNat true false zeroo)
                                                         , Œª Œ≥* ‚Üí 1)
_ = refl
_ : compile-eval "if isZero 1 then false else isZero 0" ‚â° inj‚ÇÅ (Bool , iteBool
                                                                         false
                                                                         (iteNat true false zeroo)
                                                                         (iteNat true false (suco zeroo))
                                                                     , Œª Œ≥* ‚Üí tt)
_ = refl
_ : compile-eval "if true then 0 else false" ‚â° inj‚ÇÇ type-error -- branches have different types
_ = refl
_ : compile-eval "if 42 then 0 else 1"       ‚â° inj‚ÇÇ type-error -- condition is Nat instead of Bool
_ = refl
_ : compile-eval "Œªx.x"                      ‚â° inj‚ÇÇ type-error -- not annotated, type unknown
_ = refl
_ : compile-eval "10 true"                   ‚â° inj‚ÇÇ type-error -- application on non-function type
_ = refl
_ : compile-eval "(Œªx.x) : ‚Ñï ‚Üí ‚Ñï"            ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam q , Œª Œ≥* x ‚Üí x)
_ = refl
_ : compile-eval "((Œªx.x) : ‚Ñï ‚Üí ‚Ñï) 1 + 2" ‚â° inj‚ÇÅ (Nat , lam q $ (lam (lam (iteNat q (suco q) (q [ p ])))
                                                        $ suco zeroo $ suco (suco zeroo))
                                                      , Œª Œ≥* ‚Üí 3)
_ = refl
_ : compile-eval "(Œªf. f true) : ùïÉ ‚Üí ‚Ñï ‚Üí ‚Ñï" ‚â° inj‚ÇÇ type-error -- ‚Üí is right associative (we curry by default)
_ = refl
_ : compile-eval "(Œªf. f true) : (ùïÉ ‚Üí ‚Ñï) ‚Üí ‚Ñï" ‚â° inj‚ÇÅ ((Bool ‚áí Nat) ‚áí Nat , lam (q $ true)
                                                                         , Œª Œ≥* f ‚Üí f tt)
_ = refl
_ : compile-eval "(Œª cond val. if cond then val else 0) : ùïÉ ‚Üí ‚Ñï ‚Üí ‚Ñï" ‚â° inj‚ÇÅ (Bool ‚áí Nat ‚áí Nat
                                                                          , lam (lam
                                                                            (iteBool q zeroo (q [ p ])))
                                                                          , Œª Œ≥* cond val ‚Üí if cond then val else 0)
_ = refl

-- Products
_ : compile-eval "0 , false" ‚â° inj‚ÇÅ ((Nat √óo Bool) , ‚ü® zeroo , false ‚ü©
                                                   , Œª Œ≥* ‚Üí 0 , ff)
_ = refl
_ : compile-eval "trivial , 1 + 2 , ((Œª x.x) : ùïÉ ‚Üí ùïÉ)" ‚â° inj‚ÇÅ ((Unit √óo (Nat √óo (Bool ‚áí Bool))) ,
                                                              ‚ü® trivial , ‚ü® lam (lam (iteNat q (suco q) (q [ p ])))
                                                              $ suco zeroo $ suco (suco zeroo) , lam q ‚ü© ‚ü©
                                                            , Œª Œ≥* ‚Üí _ , 3 , (Œª x ‚Üí x))
_ = refl

-- Sums
_ : compile-eval "inl 2" ‚â° inj‚ÇÇ type-error -- cannot deduce type
_ = refl
_ : compile-eval "(inl 2) : ‚Ñï ‚äé ‚ä§" ‚â° inj‚ÇÅ ((Nat +o Unit) , inl (suco (suco zeroo))
                                                         , Œª Œ≥* ‚Üí inj‚ÇÅ 2)
_ = refl
_ : compile-eval "case ((Œªx.x):‚Ñï‚Üí‚Ñï) or ((Œª_.0):‚ä§‚Üí‚Ñï)" ‚â° inj‚ÇÅ ((Nat +o Unit) ‚áí Nat ,
                                                            lam (caseo (lam q [ p ] $ q) (lam zeroo [ p ] $ q))
                                                          , Œª Œ≥* u ‚Üí [ (Œª x ‚Üí x) , (Œª _ ‚Üí 0) ]‚Ä≤ u)
_ = refl
_ : compile-eval "(case ((Œªx.x):‚Ñï‚Üí‚Ñï) or ((Œª_.0):‚ä§‚Üí‚Ñï)) inl 1" ‚â° inj‚ÇÅ (Nat , lam (caseo (lam q [ p ] $ q)
                                                                                      (lam zeroo [ p ] $ q))
                                                                               $ inl (suco zeroo)
                                                                         , Œª Œ≥* ‚Üí 1)
_ = refl

-- Lists
_ : compile-eval "[0,1,2]"         ‚â° inj‚ÇÅ (Ty.List Nat , cons zeroo (cons (suco zeroo) (cons (suco (suco zeroo)) nil))
                                                       , Œª Œ≥* ‚Üí 0 ‚à∑ (1 ‚à∑ (2 ‚à∑ [])))
_ = refl
_ : compile-eval "0 ‚à∑ 1 ‚à∑ 2 ‚à∑ nil" ‚â° inj‚ÇÅ (Ty.List Nat , cons zeroo (cons (suco zeroo) (cons (suco (suco zeroo)) nil))
                                                       , Œª Œ≥* ‚Üí 0 ‚à∑ (1 ‚à∑ (2 ‚à∑ [])))
_ = refl
_ : compile-eval "true ‚à∑ (isZero 0)" ‚â° inj‚ÇÇ type-error -- 2nd operand to cons is not a list
_ = refl
_ : compile-eval "[1, trivial]"      ‚â° inj‚ÇÇ type-error -- different type of elements
_ = refl
_ : compile-eval "[]"                ‚â° inj‚ÇÇ type-error -- type cannot be deduced
_ = refl
_ : compile-eval "([]) : ‚Ñï"          ‚â° inj‚ÇÇ type-error -- Nat is not a List type
_ = refl
_ : compile-eval "([]) : [‚Ñï]" ‚â° inj‚ÇÅ (Ty.List Nat , nil , Œª _ ‚Üí [])
_ = refl

-- Trees
_ : compile-eval "<0> | (<1> | <2>)" ‚â° inj‚ÇÅ (Ty.Tree Nat , I.node (I.leaf zeroo)
                                                                  (I.node (I.leaf (suco zeroo))
                                                                          (I.leaf (suco (suco zeroo))))
                                                         , Œª Œ≥* ‚Üí Tree.node (Tree.leaf 0)
                                                                            (Tree.node (Tree.leaf 1)
                                                                                       (Tree.leaf 2)))
_ = refl
_ : compile-eval "<0 , 0> | <0 , 1>" ‚â° inj‚ÇÅ (Ty.Tree (Nat √óo Nat) , I.node (I.leaf ‚ü® zeroo ,      zeroo ‚ü©)
                                                                           (I.leaf ‚ü® zeroo , suco zeroo ‚ü©)
                                                                  , Œª Œ≥* ‚Üí Tree.node (Tree.leaf (0 , 0))
                                                                                     (Tree.leaf (0 , 1)))
_ = refl
_ : compile-eval "<0> | (<1> | <true>)" ‚â° inj‚ÇÇ type-error  -- different type of elements
_ = refl

-- Streams
evens = "genStream ((Œªn.n):‚Ñï‚Üí‚Ñï) ((Œªn.n+2):‚Ñï‚Üí‚Ñï) 0"
_ : compile-eval evens ‚â° inj‚ÇÅ (Ty.Stream Nat , I.genStream
                                               (lam q [ p ] $ q)
                                               (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                                                 $ q $ suco (suco zeroo)) [ p ] $ q)
                                               zeroo
                                             , Œª Œ≥* ‚Üí STLC.genStream (Œª x ‚Üí x) (Œª x ‚Üí ite‚Ñï 2 (Œª y ‚Üí suc y) x) 0)
_ = refl
_ : eval ("head "           ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval ("head tail "      ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 2)
_ = refl
_ : eval ("head tail tail " ++ evens) ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 4)
_ = refl

-- Machines
machine-code = "genMachine ((Œªx i. x+i) : ‚Ñï‚Üí‚Ñï‚Üí‚Ñï) \
\                          ((Œª_. 0)     : ‚Ñï‚Üí‚Ñï)   \
\                          ((Œªx. x)     : ‚Ñï‚Üí‚Ñï)   \
\                          0"
_ : compile-eval machine-code ‚â° inj‚ÇÅ (Ty.Machine , I.genMachine
                                     ((lam (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                                       $ q [ p ] $ q)) [ p ] $ q) [ p ] $ q) -- put:  add parameter to sum
                                     (lam zeroo [ p ] $ q)                   -- set:  reset sum to 0
                                     (lam q [ p ] $ q)                       -- get:  output current sum
                                     zeroo                                   -- seed: start sum from 0
                                   , Œª Œ≥* ‚Üí STLC.genMachine (Œª x y ‚Üí ite‚Ñï y (Œª z ‚Üí suc z) x) (Œª x ‚Üí 0) (Œª x ‚Üí x) 0)
_ = refl
_ : eval ("get " ++ machine-code)                                ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí  0)
_ = refl
_ : eval ("get put " ++ machine-code ++ " 10")                   ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 10)
_ = refl
_ : eval ("get put put put " ++ machine-code ++ " 10 20 30")     ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 60)
_ = refl
_ : eval ("get put put set put " ++ machine-code ++ " 10 20 30") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 50)
_ = refl

--------------------------------------
-- Some well-known functions

id-‚Ñï   = "(Œª x . x)     : ‚Ñï ‚Üí ‚Ñï"
+1     = "(Œª x . x+1)   : ‚Ñï ‚Üí ‚Ñï"
double = "(Œª x . x+x)   : ‚Ñï ‚Üí ‚Ñï"
triple = "(Œª x . x+x+x) : ‚Ñï ‚Üí ‚Ñï"
plus   = "(Œª x y. ite‚Ñï x ((Œªx.x + 1) : ‚Ñï ‚Üí ‚Ñï) y) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï"

_ : compile-eval id-‚Ñï ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam q
                                        , Œª Œ≥* x ‚Üí x)
_ = refl
_ : compile-eval +1 ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam (lam (lam (iteNat q (suco q) (q [ p ]))) $ q $ suco zeroo)
                                      , Œª Œ≥* x ‚Üí ite‚Ñï 1 (Œª y ‚Üí suc y) x)
_ = refl
_ : compile-eval double ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam (lam (lam (iteNat q (suco q) (q [ p ]))) $ q $ q)
                                          , Œª Œ≥* x ‚Üí ite‚Ñï x (Œª y ‚Üí suc y) x)
_ = refl
_ : compile-eval triple ‚â° inj‚ÇÅ (Nat ‚áí Nat , lam (lam (lam (iteNat q (suco q) (q [ p ])))
                                            $ (lam (lam (iteNat q (suco q) (q [ p ]))) $ q $ q) $ q)
                                          , Œª Œ≥* x ‚Üí ite‚Ñï x (Œª y ‚Üí suc y) (ite‚Ñï x (Œª y ‚Üí suc y) x))
_ = refl
_ : compile-eval plus ‚â° inj‚ÇÅ (Nat ‚áí Nat ‚áí Nat , lam (lam (iteNat (q [ p ]) (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                                                $ q $ suco zeroo) [ p ] $ q) q))
                                              , Œª Œ≥* x y ‚Üí ite‚Ñï x (Œª z ‚Üí ite‚Ñï 1 (Œª w ‚Üí suc w) z) y)
_ = refl

id-ùïÉ   = "(Œª a  . a)                         : ùïÉ ‚Üí ùïÉ"
not    = "(Œª a  . if a then false else true) : ùïÉ ‚Üí ùïÉ"
and    = "(Œª a b. if a then b    else false) : ùïÉ ‚Üí ùïÉ ‚Üí ùïÉ"
or     = "(Œª a b. if a then true else b)     : ùïÉ ‚Üí ùïÉ ‚Üí ùïÉ"
xor    = "(Œª a b.          \
\          if a then        \
\            if b then      \
\              false        \
\            else           \
\              true         \
\          else if b then   \
\            true           \
\          else             \
\            false)         : ùïÉ ‚Üí ùïÉ ‚Üí ùïÉ"

_ : compile-eval id-ùïÉ ‚â° inj‚ÇÅ (Bool ‚áí Bool , lam q
                                          , Œª Œ≥* a ‚Üí a)
_ = refl
_ : compile-eval not ‚â° inj‚ÇÅ (Bool ‚áí Bool , lam (iteBool false true q)
                                         , Œª Œ≥* a ‚Üí if a then ff else tt)
_ = refl
_ : compile-eval and ‚â° inj‚ÇÅ (Bool ‚áí Bool ‚áí Bool , lam (lam (iteBool q false (q [ p ])))
                                                , Œª Œ≥* a b ‚Üí if a then b else ff)
_ = refl
_ : compile-eval or ‚â° inj‚ÇÅ (Bool ‚áí Bool ‚áí Bool , lam (lam (iteBool true q (q [ p ])))
                                               , Œª Œ≥* a b ‚Üí if a then tt else b)
_ = refl
_ : compile-eval xor ‚â° inj‚ÇÅ (Bool ‚áí Bool ‚áí Bool , lam (lam (iteBool (iteBool false true q) (iteBool true false q) (q [ p ])))
                                                , Œª Œ≥* a b ‚Üí if a then if b then ff else tt else (if b then tt else ff))
_ = refl

twice   = "(Œª f x  .   f f x) : (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí ‚Ñï"
3-times = "(Œª f x  . f f f x) : (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí ‚Ñï"
_‚àò‚Ñï‚Üí‚Ñï_  = "(Œª f g x.   f g x) : (‚Ñï ‚Üí ‚Ñï) ‚Üí (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï ‚Üí ‚Ñï"

_ : compile-eval twice ‚â° inj‚ÇÅ ((Nat ‚áí Nat) ‚áí Nat ‚áí Nat , lam (lam (q [ p ] $ (q [ p ] $ q)))
                                                       , Œª Œ≥* f x ‚Üí f (f x))
_ = refl
_ : compile-eval 3-times ‚â° inj‚ÇÅ ((Nat ‚áí Nat) ‚áí Nat ‚áí Nat , lam (lam (q [ p ] $ (q [ p ] $ (q [ p ] $ q))))
                                                         , Œª Œ≥* f x ‚Üí f (f (f x)))
_ = refl
_ : compile-eval _‚àò‚Ñï‚Üí‚Ñï_ ‚â° inj‚ÇÅ ((Nat ‚áí Nat) ‚áí (Nat ‚áí Nat) ‚áí Nat ‚áí Nat , lam (lam (lam (q [ p ] [ p ] $ (q [ p ] $ q))))
                                                                      , Œª Œ≥* f g x ‚Üí f (g x))
_ = refl

isnil-[‚Ñï] = "(Œª xs. iteList true ((Œª _ _.false) : ‚Ñï ‚Üí ùïÉ ‚Üí ùïÉ) xs) : [‚Ñï] ‚Üí ùïÉ"
isnil-[ùïÉ] = "(Œª xs. iteList true ((Œª _ _.false) : ùïÉ ‚Üí ùïÉ ‚Üí ùïÉ) xs) : [ùïÉ] ‚Üí ùïÉ"

sum-list = "(Œª xs. iteList 0 ((Œª x y. x + y) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) xs) : [‚Ñï] ‚Üí ‚Ñï"
sum-tree = "(Œª t.  iteTree ((Œª x.x) : ‚Ñï ‚Üí ‚Ñï) ((Œª l r. l + r) : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï) t) : (Tree ‚Ñï) ‚Üí ‚Ñï"

concat = "(Œª xs ys . iteList ys ((Œª a as. a ‚à∑ as) : ‚Ñï ‚Üí [‚Ñï] ‚Üí [‚Ñï]) xs) : [‚Ñï] ‚Üí [‚Ñï] ‚Üí [‚Ñï]"

_ : compile-eval isnil-[‚Ñï] ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Bool , lam (I.iteList true ((lam (lam false) [ p ] $ q) [ p ] $ q) q)
                                                      , Œª Œ≥* xs ‚Üí STLC.iteList tt (Œª _ _ ‚Üí ff) xs)
_ = refl
_ : compile-eval isnil-[ùïÉ] ‚â° inj‚ÇÅ (Ty.List Bool ‚áí Bool , lam (I.iteList true ((lam (lam false) [ p ] $ q) [ p ] $ q) q)
                                                       , Œª Œ≥* xs ‚Üí STLC.iteList tt (Œª _ _ ‚Üí ff) xs)
_ = refl

_ : compile-eval sum-list ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Nat , lam (I.iteList zeroo ((lam (lam (lam (lam (iteNat q (suco q) (q [ p ])))
                                                      $ q [ p ] $ q)) [ p ] $ q) [ p ] $ q) q)
                                                    , Œª Œ≥* xs ‚Üí STLC.iteList 0 (Œª x y ‚Üí ite‚Ñï y (Œª z ‚Üí suc z) x) xs)
_ = refl

_ : compile-eval sum-tree ‚â° inj‚ÇÅ (Ty.Tree Nat ‚áí Nat , lam (I.iteTree (lam q [ p ] $ q) ((lam (lam (lam (lam
                                                      (iteNat q (suco q) (q [ p ]))) $ q [ p ] $ q)) [ p ] $ q) [ p ] $ q) q)
                                                    , Œª Œ≥* t ‚Üí STLC.iteTree (Œª x ‚Üí x) (Œª x y ‚Üí ite‚Ñï y (Œª z ‚Üí suc z) x) t)
_ = refl

_ : compile-eval concat ‚â° inj‚ÇÅ (Ty.List Nat ‚áí Ty.List Nat ‚áí Ty.List Nat , lam (lam (I.iteList q ((lam (lam (cons (q [ p ]) q))
                                                                          [ p ] $ q) [ p ] $ q) (q [ p ])))
                                                                 , (Œª Œ≥* xs ys ‚Üí STLC.iteList ys (Œª a as ‚Üí a ‚à∑ as) xs))
_ = refl

-- Alpha equivalence

_ : compile-eval "(Œªx.x) : ‚Ñï ‚Üí ‚Ñï" ‚â° compile-eval "(Œªy.y) : ‚Ñï ‚Üí ‚Ñï"
_ = refl

--------------------------------------
-- Some concrete computations

infixl 15 _++‚Çõ_
_++‚Çõ_ : String ‚Üí String ‚Üí String  -- safe source code concatenation with parentheses to preserve
s ++‚Çõ s' = parens s ++ parens s'  -- bounds of abstractions (i.e., Œª extends as far right as possible)

_ : eval (triple ++‚Çõ "8") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 24)
_ = refl
_ : eval (plus ++‚Çõ "3" ++‚Çõ "8") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 11)
_ = refl
_ : eval (xor ++‚Çõ "true" ++‚Çõ "true") ‚â° inj‚ÇÅ (Bool , Œª Œ≥* ‚Üí ff)
_ = refl
_ : eval (xor ++‚Çõ "true" ++‚Çõ "false") ‚â° inj‚ÇÅ (Bool , Œª Œ≥* ‚Üí tt)
_ = refl
_ : eval (3-times ++‚Çõ +1 ++‚Çõ "10") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 13)
_ = refl
_ : eval (_‚àò‚Ñï‚Üí‚Ñï_ ++‚Çõ double ++‚Çõ triple ++‚Çõ "10") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 60)
_ = refl
_ : eval (sum-list ++‚Çõ "[]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 0)
_ = refl
_ : eval (sum-list ++‚Çõ "[10, 7, 20, 1]") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 38)
_ = refl
_ : eval (sum-tree ++‚Çõ "<4>") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 4)
_ = refl
_ : eval (sum-tree ++‚Çõ "<4> | ((<10> | <2>) | <3>)") ‚â° inj‚ÇÅ (Nat , Œª Œ≥* ‚Üí 19)
_ = refl
_ : eval (concat ++‚Çõ "[]" ++‚Çõ "[]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí [])
_ = refl
_ : eval (concat ++‚Çõ "[10, 3]" ++‚Çõ "[5, 11, 7]") ‚â° inj‚ÇÅ (Ty.List Nat , Œª Œ≥* ‚Üí 10 ‚à∑ (3 ‚à∑ (5 ‚à∑ (11 ‚à∑ (7 ‚à∑ [])))))
_ = refl
